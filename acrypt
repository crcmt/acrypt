#!/bin/bash -eu
#
# note
#  acrypt stands for Asymetric enCRYPTion

# -- func

usage ()
{
    echo "Usage:"
    echo " $0 generate"
    echo " $0 encrypt <pubkey_filename> <plaintext_filename>"
    echo " $0 decrypt <privkey_filename> <encrypted_filename>"
}

get_pass ()
{
    read -s -p "Password: " password
    echo $password
}

check_priv_key ()
{
    local privkey_filename=$1

    if [[ ! -e "$privkey_filename" ]]; then
        echo 'Missing "$privkey_filename" file'
        exit 1
    fi
}

check_pub_key ()
{
    local pubkey_filename=$1

    if [[ ! -e "$pubkey_filename" ]]; then
        echo 'Missing "$pubkey_filename" file'
        exit 1
    fi
}

# private key is encrypted with password
gen_keys_1 ()
{
    echo "Generate new keys pair"

    passwd_=$(get_pass)
    echo

    # generate private key
    openssl genrsa -aes256 -passout pass:$passwd_ -out private.key 8912

    # extract the public key.
    openssl rsa -in private.key -passin pass:$passwd_ -pubout -out public.key
}

# private key is unencrypted without password
gen_keys_2 ()
{
    echo "Generate new keys pair"
    echo

    # generate private key
    openssl genrsa -out private.key 8912

    # extract the public key.
    openssl rsa -in private.key -pubout -out public.key
}

encrypt ()
{
    public_key=$1
    plaintext_filename=$2
    openssl rsautl -encrypt -pubin -inkey $public_key -in $plaintext_filename -out encrypted.txt
}

decrypt ()
{
    privkey_filename=$1
    encrypted_filename=$2
    openssl rsautl -decrypt -inkey $privkey_filename -in $encrypted_filename -out plaintext.txt
}

# -- init

priv_encryption=false


# -- parse args

# parse the options:
while getopts hp flag; do
  case "$flag" in
     p) priv_encryption=true # p stands for 'Password'
        ;;
     h) usage
        exit 0
        ;;
    \?) exit 42
        ;;
  esac
done

# keep only positional args
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
    exit 1
else
    action="$1"
fi


# -- main

if [[ $action = "generate" ]]; then

    if [[ $priv_encryption = "true" ]]; then
        gen_keys_1
    else
        gen_keys_2
    fi
elif [[ $action = "encrypt" ]]; then

    if [[ $# -ne 3 ]]; then
        usage
        exit 1
    fi

    pubkey_filename=$2
    plaintext_filename=$3
    check_pub_key $pubkey_filename
    encrypt $pubkey_filename $plaintext_filename
    echo "Encrypted file successfully created ('encrypted.txt')"
elif [[ $action = "decrypt" ]]; then

    if [[ $# -ne 3 ]]; then
        usage
        exit 1
    fi

    privkey_filename=$2
    encrypted_filename=$3
    check_priv_key $privkey_filename
    decrypt $privkey_filename $encrypted_filename
    echo "Plaintext file successfully created ('plaintext.txt')"
else
    usage
    exit 1
fi
