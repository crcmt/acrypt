#!/bin/bash -eu
#
# note
#  acrypt stands for Asymetric enCRYPTion

# -- func

usage ()
{
    echo "Usage:"
    echo " $0 generate"
    echo " $0 encrypt <pubkey_filename> <plaintext_filename>"
    echo " $0 decrypt <privkey_filename> <encrypted_filename>"
    echo "Options:"
    echo " -h    help"
    echo " -p    protect private key with password"
    echo " -y    overwrite files without confirmation"
}

prompt_overwrite ()
{
    local filename_=$1

    if [[ "$overwrite_without_confirm" = "true" ]]; then
        return 0
    fi

    if [[ -e "$filename_" ]]; then
        read -p "$filename_ will be overwrited. Do you want to continue ? (y/n)" -n 1 -r
        echo # move to a new line (needed because of the '-n' option)
        if [ "$REPLY" = "y" ]; then
            :
        else
            echo "Abort."
            exit 0
        fi
    fi
}

get_pass ()
{
    read -s -p "Password: " password
    echo $password
}

check_priv_key ()
{
    local privkey_filename=$1

    if [[ ! -e "$privkey_filename" ]]; then
        echo "Private key not found  ($privkey_filename)"
        exit 1
    fi
}

check_pub_key ()
{
    local pubkey_filename=$1

    if [[ ! -e "$pubkey_filename" ]]; then
        echo "Public key not found ($pubkey_filename)"
        exit 1
    fi
}

check_encrypted_file ()
{
    local encrypted_file=$1

    if [[ ! -e "$encrypted_file" ]]; then
        echo "Encrypted file not found ($encrypted_file)"
        exit 1
    fi
}

check_plaintext_file ()
{
    local plaintext_file=$1

    if [[ ! -e "$plaintext_file" ]]; then
        echo "Plaintext file not found ($plaintext_file)"
        exit 1
    fi
}

# private key with password (encrypted)
gen_keys_1 ()
{
    echo "Generate new keys pair"

    passwd_=$(get_pass)
    echo

    private_key=private.key
    public_key=public.key

    prompt_overwrite $private_key

    # generate private key
    openssl genrsa -aes256 -passout pass:$passwd_ -out $private_key 8912

    prompt_overwrite $public_key

    # extract the public key.
    openssl rsa -in $private_key -passin pass:$passwd_ -pubout -out $public_key
}

# private key without password (unencrypted)
gen_keys_2 ()
{
    echo "Generate new keys pair"
    echo

    private_key=private.key
    public_key=public.key

    prompt_overwrite $private_key

    # generate private key
    openssl genrsa -out $private_key 8912

    prompt_overwrite $public_key

    # extract the public key.
    openssl rsa -in $private_key -pubout -out $public_key
}

encrypt ()
{
    public_key=$1
    plaintext_filename=$2

    encrypted_filename=encrypted.dat

    prompt_overwrite $encrypted_filename

    openssl rsautl -encrypt -pubin -inkey $public_key -in $plaintext_filename -out $encrypted_filename
}

decrypt ()
{
    privkey_filename=$1
    encrypted_filename=$2

    plaintext_filename=plaintext.txt

    prompt_overwrite $plaintext_filename

    openssl rsautl -decrypt -inkey $privkey_filename -in $encrypted_filename -out $plaintext_filename
}

# -- init

priv_encryption=false
overwrite_without_confirm=false

# -- parse args

# parse the options:
while getopts hpy flag; do
  case "$flag" in
     y) overwrite_without_confirm=true # y stands for 'Yes'
        ;;
     p) priv_encryption=true # p stands for 'Password'
        ;;
     h) usage
        exit 0
        ;;
    \?) exit 42
        ;;
  esac
done

# keep only positional args
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
    usage
    exit 1
else
    action="$1"
fi


# -- dep check

if ! which openssl &>/dev/null; then
    echo "Error: openssl not found"
    exit 1
fi


# -- main

if [[ $action = "generate" ]]; then

    if [[ $priv_encryption = "true" ]]; then
        gen_keys_1
    else
        gen_keys_2
    fi
elif [[ $action = "encrypt" ]]; then

    if [[ $# -ne 3 ]]; then
        usage
        exit 1
    fi

    pubkey_filename=$2
    plaintext_filename=$3
    check_pub_key $pubkey_filename
    check_plaintext_file $plaintext_filename
    encrypt $pubkey_filename $plaintext_filename
    echo "Encrypted file successfully created (encrypted.dat)"
elif [[ $action = "decrypt" ]]; then

    if [[ $# -ne 3 ]]; then
        usage
        exit 1
    fi

    privkey_filename=$2
    encrypted_filename=$3
    check_priv_key $privkey_filename
    check_encrypted_file $encrypted_filename
    decrypt $privkey_filename $encrypted_filename
    echo "Plaintext file successfully created (plaintext.txt)"
else
    usage
    exit 1
fi
